input {
        beats {
                port => 5044
                type => "mongodblog"
        }
}

 
filter {
    if [event][module] == "mongodb" {
        grok {
            #match => ["message","%{TIMESTAMP_ISO8601:timestamp}\s+I %{WORD:mongodb.action}\s+\[%{GREEDYDATA:mongodb.connection}\]\s+%{GREEDYDATA:mongodb.body}"]
            match => ["message","%{TIMESTAMP_ISO8601:timestamp}\s+%{WORD:mongodb.severity}  %{WORD:mongodb.action}\s+\[%{GREEDYDATA:mongodb.connection}\]\s+%{GREEDYDATA:mongodb.body}"]
	    #remove_field => [ "message" ]
        }

        if [mongodb.body] =~ "1ms$"  {  
            grok {
                match => ["mongodb.body","%{WORD:mongodb.command.name}\s+%{WORD:mongodb.db}\.\$?%{WORD:mongodb.command.collection}\s+%{GREEDYDATA:mongodb.command.content}\s+%{NUMBER:mongodb.command.duration:int}ms"]
                remove_field => [ "mongodb.body" ]
            }
            
            if [mongodb.command.content] =~ "^command"  {
	            grok {
	                match => ["mongodb.command.content","command: %{WORD:mongodb.command.type}"]
	           }
			   
		       grok {
		          match => ["mongodb.command.content"," cursorid:%{NUMBER:mongodb.command.cursorid}"]
		          add_tag => "mongo_profiling_data"
		        }
		        grok {
		
		          match => ["mongodb.command.content"," planSummary: %{WORD:mongodb.command.plan_summary}"]
		          add_tag => "mongo_profiling_data"
		        }
		        grok {
		          match => ["mongodb.command.content"," keysExamined:%{NUMBER:mongodb.command.key_examined:int}"]
		          add_tag => "mongo_profiling_data"
		        }
		        grok {
		          match => ["mongodb.command.content"," docsExamined:%{NUMBER:mongodb.command.docs_examined:int}"]
		          add_tag => "mongo_profiling_data"
		        }
		        grok {
		          match => ["mongodb.command.content"," cursorExhausted:%{NUMBER:mongodb.command.cursor_exhausted:int}"]
		          add_tag => "mongo_profiling_data"
		        }
		        grok {
		          match => ["mongodb.command.content"," numYields:%{NUMBER:mongodb.command.num_yields:int}"]
		          add_tag => "mongo_profiling_data"
		        }
		        grok {
		          match => ["mongodb.command.content"," nreturned:%{NUMBER:mongodb.command.nreturned:int}"]
		          add_tag => "mongo_profiling_data"
		        }
		        grok {
		          match => ["mongodb.command.content"," reslen:%{NUMBER:mongodb.command.result_length:int}"]
		          add_tag => "mongo_profiling_data"
		        }
		        grok {
		          match => ["mongodb.command.content"," hasSortStage:%{NUMBER:mongodb.command.has_sort_stage:int}"]
		          add_tag => "mongo_profiling_data"
		        }
		        grok {
		          match => ["mongodb.command.content"," nMatched:%{NUMBER:mongodb.command.n_matched:int}"]
		          add_tag => "mongo_profiling_data"
		        }
		        grok {
		          match => ["mongodb.command.content"," nModified:%{NUMBER:mongodb.command.n_modified:int}"]
		          add_tag => "mongo_profiling_data"
		        }
		        grok {
		          match => ["mongodb.command.content"," hasSortStage:%{NUMBER:mongodb.command.has_sort_stage:int}"]
		          add_tag => "mongo_profiling_data"
		        }
		        grok {
		          match => ["mongodb.command.content"," hasSortStage:%{NUMBER:mongodb.command.has_sort_stage:int}"]
		          add_tag => "mongo_profiling_data"
		        }
		        grok {
		          match => ["mongodb.command.content"," ninserted:%{NUMBER:mongodb.command.ninserted:int}"]
		          add_tag => "mongo_profiling_data"
		        }
		        grok {
		          match => ["mongodb.command.content"," keysInserted:%{NUMBER:mongodb.command.keys_inserted:int}"]
		          add_tag => "mongo_profiling_data"
		        }
	        }
        }
        
        date {
            match => [ "timestamp", "UNIX", "YYYY-MM-dd HH:mm:ss", "ISO8601"]
            remove_field => [ "timestamp" ]
        }
        
        if "mongo_profiling_data" in [tags] {
            mutate {
               remove_tag => "_grokparsefailure"
            }
        }
         
        mutate {
            #remove_field => ["message"]
        }
    }
}

