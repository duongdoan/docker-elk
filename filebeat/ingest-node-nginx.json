PUT _ingest/pipeline/filebeat-7.4.2-nginx-access-apm
{
    "description" : "Pipeline for parsing Nginx access logs. Requires the geoip and user_agent plugins.",
    "processors" : [
      {
        "grok" : {
          "field" : "message",
          "patterns" : [
            "\"?(?:%{IP_LIST:nginx.access.remote_ip_list}|%{DATA:source.address}) - %{DATA:user.name} \\[%{HTTPDATE:nginx.access.time}\\] \"%{DATA:nginx.access.info}\" %{NUMBER:http.response.status_code:long} %{NUMBER:http.response.body.bytes:long} \"%{DATA:http.request.referrer}\" \"%{DATA:user_agent.original}\" rt=%{NUMBER:http.request.time:float} rl=%{NUMBER:http.request.length:long}"
          ],
          "pattern_definitions" : {
            "IP_LIST" : "%{IP}(\"?,?\\s*%{IP})*"
          },
          "ignore_missing" : true
        }
      },
      {
        "grok" : {
          "field" : "nginx.access.info",
          "patterns" : [
            "%{WORD:http.request.method} %{DATA:url.original} HTTP/%{NUMBER:http.version}",
            ""
          ],
          "ignore_missing" : true
        }
      },
      {
        "grok" : {
          "field" : "url.original",
          "patterns" : [
            "%{DATA:url.path}(\\?%{DATA:url.query})?$"
          ],
          "ignore_missing" : true
        }
      },
      {
        "remove" : {
          "field" : "nginx.access.info"
        }
      },
      {
        "split" : {
          "field" : "nginx.access.remote_ip_list",
          "separator" : "\"?,?\\s+",
          "ignore_missing" : true
        }
      },
      {
        "split" : {
          "field" : "nginx.access.origin",
          "separator" : "\"?,?\\s+",
          "ignore_missing" : true
        }
      },
      {
        "set" : {
          "field" : "source.ip",
          "value" : ""
        }
      },
      {
        "script" : {
          "source" : "boolean isPrivate(def dot, def ip) { try { StringTokenizer tok = new StringTokenizer(ip, dot); int firstByte = Integer.parseInt(tok.nextToken());       int secondByte = Integer.parseInt(tok.nextToken());       if (firstByte == 10) {         return true;       }       if (firstByte == 192 && secondByte == 168) {         return true;       }       if (firstByte == 172 && secondByte >= 16 && secondByte <= 31) {         return true;       }       if (firstByte == 127) {         return true;       }       return false;     } catch (Exception e) {       return false;     }   }   try {    ctx.source.ip = null;    if (ctx.nginx.access.remote_ip_list == null) { return; }    def found = false;    for (def item : ctx.nginx.access.remote_ip_list) {        if (!isPrivate(params.dot, item)) {            ctx.source.ip = item;            found = true;            break;        }    }    if (!found) {     ctx.source.ip = ctx.nginx.access.remote_ip_list[0];   }} catch (Exception e) { ctx.source.ip = null; }",
          "params" : {
            "dot" : "."
          },
          "lang" : "painless"
        }
      },
      {
        "remove" : {
          "if" : "ctx.source.ip == null",
          "field" : "source.ip"
        }
      },
      {
        "convert" : {
          "field" : "source.ip",
          "target_field" : "source.address",
          "type" : "string",
          "ignore_missing" : true
        }
      },
	  {
	     "remove" : {
	        "field" : "message"
	     }
	  },
      {
        "rename" : {
          "field" : "@timestamp",
          "target_field" : "event.created"
        }
      },
      {
        "date" : {
          "field" : "nginx.access.time",
          "target_field" : "@timestamp",
          "formats" : [
            "dd/MMM/yyyy:H:m:s Z"
          ],
          "on_failure" : [
            {
              "append" : {
                "field" : "error.message",
                "value" : "{{ _ingest.on_failure_message }}"
              }
            }
          ]
        }
      },
      {
        "remove" : {
          "field" : "nginx.access.time"
        }
      },
      {
        "user_agent" : {
          "field" : "user_agent.original"
        }
      },
      {
        "geoip" : {
          "field" : "source.ip",
          "target_field" : "source.geo",
          "ignore_missing" : true
        }
      },
      {
        "geoip" : {
          "ignore_missing" : true,
          "database_file" : "GeoLite2-ASN.mmdb",
          "field" : "source.ip",
          "target_field" : "source.as",
          "properties" : [
            "asn",
            "organization_name"
          ]
        }
      },
      {
        "rename" : {
          "target_field" : "source.as.number",
          "ignore_missing" : true,
          "field" : "source.as.asn"
        }
      },
      {
        "rename" : {
          "field" : "source.as.organization_name",
          "target_field" : "source.as.organization.name",
          "ignore_missing" : true
        }
      }
    ],
    "on_failure" : [
      {
        "set" : {
          "field" : "error.message",
          "value" : "{{ _ingest.on_failure_message }}"
        }
      }
    ]
  }


